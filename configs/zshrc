# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

# Set my terminal if I'm not in tmux.
[[ "$TMUX" == "" ]] && TERM=xterm-256color

# Set name of the theme to load.
ZSH_THEME="bbs"

# Disable autosetting terminal title.
DISABLE_AUTO_TITLE="true"

# Disable command autocorrection.
DISABLE_CORRECTION="true"

# Display red dots while waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Disable marking untracked files under VCS as dirty. This makes repository 
# status check for large repositories much, much faster.
DISABLE_UNTRACKED_FILES_DIRTY="true"

# Load these oh-my-zsh plugins.
plugins=(git colorize themes)

source $ZSH/oh-my-zsh.sh

# Use VI mode.
bindkey -v
bindkey '^R' history-incremental-search-backward

# Configure zsh options #######################################################
setopt autolist       # Display completion candidates immediately.
setopt cdablevars     # When an argument should be a dir but is not one,
                      # expand it as if it started with ~ (see below).
setopt autonamedirs   # Any parameter that is set to an abosolute directory
                      # name automatically becomes a name for that directory
                      # in the form ~param.
setopt histignoredups # Do not record a command in the history if it is a
                      # duplicate of the previous one.
setopt listtypes      # When listing files that are possible completions,
                      # indicate their types with a trailing character.
setopt nolistbeep     # No bell on ambiguous completion!!

# I like my slow locomotive.
unalias sl

# Adjust widget behaviors. ####################################################
# While selecting from menu completion, pressing enter accepts the selection 
# and executes the command.
bindkey -M menuselect '^M' .accept-line

# Add locations to the $PATH that actually exist.
PATH="/usr/local/bin:$PATH"
[ -d "/usr/texbin:$PATH" ]              && PATH="/usr/texbin:$PATH"
[ -d "$HOME/.rbenv/bin" ]               && PATH="$HOME/.rbenv/bin:$PATH"
[ -d "$HOME/bin:$PATH" ]                && PATH="$HOME/bin:$PATH"
[ -d "/usr/local/share/npm/bin:$PATH" ] && PATH="/usr/local/share/npm/bin:$PATH"
[ -d "$HOME/PebbleSDK-2.0.0/bin" ]      && PATH="$HOME/PebbleSDK-2.0.0/bin:$PATH"

# Initialize rbenv if it exists.
which rbenv > /dev/null 2>&1 && eval "$(rbenv init -)"

# Perform a visual diff of conflicted source files in vim.
function vdiff () {
	if [ $# -eq 0 ]; then
		echo "Usage: vdiff FILENAME"
		return 1
	else
		BASE_FILE="$1"
		MINE_FILE="$1.working"

		if [ ! -f "$MINE_FILE" ]; then
			echo "The base file given does not have a .mine variation."
			return 1
		fi

		# Get all of the file variations and find the numbered ones.
    FILES=$(ls $1.merge-*.r*)
    files=("${(f)FILES}")
		#read V1_FILE V2_FILE <<< $(ls -1 $1.merge-*.r*)

    if [[ $#files -lt 2 ]]; then
			echo "I couldn't find revision variations ($1.merge-*.r*)."
			return 1
    fi

		#if [ ! -f "$V1_FILE" ] || [ ! -f "$V2_FILE" ]; then
		#	echo "I can't find revision variations ($1.r*)."
		#	return 1
		#fi

		# Re-shuffle them if they're not in numerical order.
		if [[ "${files[1]##*.r}" -gt "${files[2]##*.r}" ]]; then
			LEFT_FILE=$files[2]
			RIGHT_FILE=$files[1]
		else
			LEFT_FILE=$files[1]
			RIGHT_FILE=$files[2]
		fi

		#echo "Starting vimdiff with $LEFT_FILE -> $MINE_FILE -> $RIGHT_FILE"
		#vim -d "$LEFT_FILE" "$MINE_FILE" "$RIGHT_FILE"
		vim "$1" -c "split $RIGHT_FILE | diffthis | vert split $MINE_FILE | diffthis | vert split $LEFT_FILE | diffthis"
	fi
}

# In case you want to see a new MOTD, you can just call this function.
function motd () {
  # Set up some ANSI colors real quick.
  WHITE="\e[38;5;255m"
  GRAY="\e[38;5;239m"
  SILVER="\e[38;5;245m"

  # Output a fortune on login if the program exists.
  # This generates a very elaborate box. Perl is used to pad each line of fortune
  # with spaces so that the right edge of the box aligns. This proved to be
  # difficult if not impossible to do with awk/sed. I obviously hold my ASCII
  # boxes in very high regard.
  which fortune > /dev/null && which sed > /dev/null
  if (( $? == 0 )); then
    HEAD="╡ ${WHITE}M${SILVER}essage ${WHITE}O${SILVER}f ${WHITE}T${SILVER}he ${WHITE}D${SILVER}ay${GRAY} ╞"
    TOP_LEN=$(( $COLUMNS - 32 ))
    BOTTOM_LEN=$(( $COLUMNS - 10 ))
    TOP_LINE=${(l:$TOP_LEN::═:)}
    BOTTOM_LINE=${(l:$BOTTOM_LEN::═:)}

    echo "$WHITE╒═$SILVER════$GRAY$TOP_LINE$HEAD$SILVER═$WHITE═╕"
    fortune -s | perl -e 'my $cols=shift @ARGV; while (<>) { chomp; s/\t/    /g; print "│ ".$_.(" " x ($cols-length()-4))."│\n"; }' ${COLUMNS}
    echo "$WHITE╘═$SILVER═$GRAY$BOTTOM_LINE$SILVER════$WHITE═╛"
  fi
}

# Put the SSH agent socket in a predictable location.
SOCK="/tmp/ssh-agent-$USER-socket"
if [ $SSH_AUTH_SOCK ] && [ $SSH_AUTH_SOCK != $SOCK ]; then
  rm -f "/tmp/ssh-agent-$USER-socket"
  ln -sf $SSH_AUTH_SOCK $SOCK
  export SSH_AUTH_SOCK=$SOCK
fi

# Aliases.
alias ta="tmux attach"
alias tad="tmux attach -d"
alias tl="tmux ls"

# Only for work.
if [[ "$MY_LOCATION" == "work" ]]; then
	if which ack-grep > /dev/null 2> /dev/null; then
		alias ack="ack-grep --pager='less'"
	fi

	alias svnc="svn-color.py"
	export PATH=$PATH:~/bin/svnkit-1.7.9/bin
	export PATH=$PATH:$HOME/.vim/bundle/commit-tracker/bin
	export PATH=$PATH:$HOME/bin/rbstats
  export PHP=/var/www/php
  export WWW=/var/www
  export RES=/var/www/resources
  alias s="ssh -A devwebphp95"
  alias h="ssh -p 2200 airborne@core-dev.com"
fi

# OS X things.
if [[ `uname` == "Darwin" ]]; then
	# This is really only for OS X, so don't use it at work.
	function top() {
		if [ $# -eq 0 ]; then
			/usr/bin/top -o cpu
		else
			/usr/bin/top "$@"
		fi
	}
  alias l="ls -alh -G"
else
  # Non-OS X things.
  alias l="ls -alh --color=always"
fi

# Show an MOTD on login :-)
motd

# vim: set et ts=2 sw=2 tw=79 cc=+1 :

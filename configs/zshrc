#!/bin/sh

# For tramp et al., don't do anything fancy.
if [[ "$TERM" == "dumb"  ]]
then
  unsetopt zle
  unsetopt prompt_cr
  unsetopt prompt_subst
  unfunction precmd
  unfunction preexec
  PS1='$ '
  return
fi

# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

# Set my terminal if I'm not in tmux.
[[ "$TMUX" == "" ]] && TERM=xterm-256color

# Set name of the theme to load.
ZSH_THEME="concise"

# Disable autosetting terminal title.
DISABLE_AUTO_TITLE="true"

# Disable command autocorrection.
DISABLE_CORRECTION="true"

# Display red dots while waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Disable marking untracked files under VCS as dirty. This makes repository
# status check for large repositories much, much faster.
DISABLE_UNTRACKED_FILES_DIRTY="true"

# Load these oh-my-zsh plugins.
plugins=(git colorize themes)

source $ZSH/oh-my-zsh.sh

# Use VI mode.
bindkey -v
bindkey '^R' history-incremental-search-backward

# Configure zsh options #######################################################
setopt autolist       # Display completion candidates immediately.
setopt cdablevars     # When an argument should be a dir but is not one,
                      # expand it as if it started with ~ (see below).
setopt autonamedirs   # Any parameter that is set to an abosolute directory
                      # name automatically becomes a name for that directory
                      # in the form ~param.
setopt histignoredups # Do not record a command in the history if it is a
                      # duplicate of the previous one.
setopt listtypes      # When listing files that are possible completions,
                      # indicate their types with a trailing character.
setopt nolistbeep     # No bell on ambiguous completion!!

# I like my slow locomotive.
unalias sl > /dev/null 2>&1

# Adjust widget behaviors. ####################################################
# While selecting from menu completion, pressing enter accepts the selection
# and executes the command.
bindkey -M menuselect '^M' .accept-line

# Add locations to the $PATH that actually exist.
PATH="/usr/local/bin:$PATH"
[ -d "/usr/texbin" ]                && PATH="/usr/texbin:$PATH"
[ -d "/usr/local/share/npm/bin" ]   && PATH="/usr/local/share/npm/bin:$PATH"
[ -d "$HOME/PebbleSDK-2.0.0/bin" ]  && PATH="$HOME/PebbleSDK-2.0.0/bin:$PATH"
[ -d "$HOME/.composer/vendor/bin" ] && PATH="$PATH:$HOME/.composer/vendor/bin"
[ -d "$HOME/go/bin" ]               && PATH="$PATH:$HOME/go/bin"

# Add my scripts directory to my path if it's there.
if [ -d "$HOME/bin" ]; then
  PATH="$HOME/bin:$PATH"
fi

# Initialize rbenv if it exists on this system and isn't yet in our path.
# This prevents path duplication in tmux when a sub-shell runs this script
# again.
if [ -d $HOME/.rbenv/shims ] && [[ ! "$PATH" =~ "rbenv" ]]; then
  export PATH="$HOME/.rbenv/shims:$PATH"
  type rbenv >/dev/null 2>&1
  [[ "$?" == 0 ]] && eval "$(rbenv init -)"
fi

# Configure my Go workspace, if I have it.
if [ -d $HOME/go ]; then
  type go >/dev/null 2>&1
  if [[ "$?" == 0 ]]; then
    export GOPATH=$HOME/go
  fi
fi

function nicediff {
  diff -W `tput cols` -y "$@" | colordiff | less
}

function serve {
  if [ $# -gt 0 ]; then
    port="$1"
  else
    port=8000
  fi

  which python > /dev/null && python -m SimpleHTTPServer $port
}

# In case you want to see a new MOTD, you can just call this function.
function motd () {
  # Set up some ANSI colors real quick.
  WHITE="\e[38;5;255m"
  GRAY="\e[38;5;239m"
  SILVER="\e[38;5;245m"

  # Output a fortune on login if the program exists.
  # This generates a very elaborate box. Perl is used to pad each line of fortune
  # with spaces so that the right edge of the box aligns. This proved to be
  # difficult if not impossible to do with awk/sed. I obviously hold my ASCII
  # boxes in very high regard.
  #
  # This should really be replaced with a small ruby or python script.
  which fortune > /dev/null 2>&1 && which sed > /dev/null 2>&1
  if (( $? == 0 )); then
    HEAD="╡ ${WHITE}M${SILVER}essage ${WHITE}O${SILVER}f ${WHITE}T${SILVER}he ${WHITE}D${SILVER}ay${GRAY} ╞"
    TOP_LEN=$(( $COLUMNS - 32 ))
    BOTTOM_LEN=$(( $COLUMNS - 10 ))
    TOP_LINE=${(l:$TOP_LEN::═:)}
    BOTTOM_LINE=${(l:$BOTTOM_LEN::═:)}

    echo "$WHITE╒═$SILVER════$GRAY$TOP_LINE$HEAD$SILVER═$WHITE═╕"
    fortune -s | perl -e 'my $cols=shift @ARGV; while (<>) { chomp; s/\t/    /g; print "│ ".$_.(" " x ($cols-length()-4))."│\n"; }' ${COLUMNS}
    echo "$WHITE╘═$SILVER═$GRAY$BOTTOM_LINE$SILVER════$WHITE═╛"
  fi
}

# Put the SSH agent socket in a predictable location. If we have an
# $SSH_AUTH_SOCK value already, link to it from a known path in /tmp. If we do
# not have an $SSH_AUTH_SOCK value but the socket link exists in /tmp, set the
# value to that link. The first case typically takes place when first
# connecting to a remote host and the second case typically takes place when
# re-attaching a previously detached tmux session.
SOCK="/tmp/ssh-agent-$USER-socket"
if [ $SSH_AUTH_SOCK ] && [ $SSH_AUTH_SOCK != $SOCK ]; then
  rm -f "/tmp/ssh-agent-$USER-socket"
  ln -sf $SSH_AUTH_SOCK $SOCK
  export SSH_AUTH_SOCK=$SOCK
elif [ -h $SOCK ] && [ ! $SSH_AUTH_SOCK ]; then
  export SSH_AUTH_SOCK=$SOCK
fi

### Aliases.
## Tmux:
alias ta="tmux attach"
alias tad="tmux attach -d"
alias tl="tmux ls"
alias urldecode='python -c "import sys, urllib as ul; print ul.unquote_plus(sys.argv[1])"'
alias ssh='ssh -A'
alias cpr="rsync -aP"

command -v xdg-open >/dev/null 2>&1 && alias open="xdg-open"

## Emacs:
#alias e="emacsclient -t"          # Preferred
alias ed="`which emacs` --daemon" # Start the daemon
#alias emacs="`which emacs` -nw"   # Failsafe
export EDITOR="emacsclient"
export ALTERNATE_EDITOR=""
export VISUAL="emacsclient"

## I don't know why this isn't configured by default.
export LD_LIBRARY_PATH=/usr/local/lib

## Todo:
alias t="todo -d $HOME/.todo.cfg"
alias tw="todo | grep @work"
export TODOTXT_DEFAULT_ACTION=ls

function stock () {
  if [ -z "$1" ]; then
    echo "Supply a ticker symbol as the only argument, e.g. stock GOOG."
    return
  fi

  curl -s "http://download.finance.yahoo.com/d/quotes.csv\?s\=$1\&f\=l1"
}

if [ -f "$HOME/.zshrc_$MY_LOCATION" ]; then
  source "$HOME/.zshrc_$MY_LOCATION"
fi

# OS X things.
if [[ `uname` == "Darwin" ]]; then
  function top() {
    if [ $# -eq 0 ]; then
      /usr/bin/top -o cpu
    else
      /usr/bin/top "$@"
    fi
  }

  # Always use:
  #   l: List in long format
  #   h: Sizes in human-readable form
  #   F: Dir, symlink, executable, etc., symbols
  #   G: Colorize!
  alias l="ls -lhFG"
  alias la="ls -lhFGA"   # All files
  alias ltr="ls -lhFGtr" # By time, reverse
  alias lsr="ls -lhFGSr" # By size, reverse
else
  # Non-OS X things.
  alias l="ls -lhF --group-directories-first --color=always"
fi

# Finally, remove duplicate PATH entries.
typeset -a paths result
paths=($path)

while [[ ${#paths} -gt 0 ]]; do
  p="${paths[1]}"
  shift paths
  [[ -z ${paths[(r)$p]} ]] && result+="$p"
done

clean_path=${(j+:+)result}
export PATH
export PATH=$clean_path

# vim: set et ts=2 sw=2 tw=79 cc=+1 :

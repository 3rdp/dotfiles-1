;-*-Emacs-Lisp-*-

;;; Commentary:
;;
;; I have nothing substantial to say here.
;;
;;; Code:

;;; Avoid compiler warnings about assigning free variables.
(defvar package-list)
(defvar package-archives)
(defvar package-archive-enable-alist)

;;; List the packages you want.
(setq package-list '(ag
                     auto-complete
                     color-theme-sanityinc-tomorrow
                     color-theme-approximate
                     evil
                     evil-leader
                     evil-jumper
                     evil-surround
                     evil-indent-textobject
                     fill-column-indicator
                     fiplr
                     flycheck
                     gtags
                     helm
                     helm-projectile
                     highlight-symbol
                     magit
                     powerline
                     powerline-evil
                     projectile
                     php-mode
                     php-extras
                     twilight-bright-theme
                     twilight-anti-bright-theme
                     window-numbering
                     yasnippet
                     zenburn-theme))

;;; List the repositories containing them.
;; For the record, I want to allow any package from ELPA or MELPA, but only the
;; ones from Marmalade that I absolutely need to have and am willing to put up
;; with potentially old releases. So leave it like this until I find the ones
;; that can't be found, then slowly add those to package-archive-enable-alist.
(setq package-archives '(("elpa" .      "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" .     "http://melpa.milkbox.net/packages/")))
(setq package-archive-enable-alist '(("marmalade" gtags)))

;;; Activate all the packages (in particular autoloads).
(package-initialize)

;;; Fetch the list of packages available.
(unless (file-exists-p package-user-dir)
  (package-refresh-contents))

;;; Install the missing packages.
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))

(add-to-list 'load-path "~/.emacs.d/themes")       ;; "Tomorrow" requires base code.
(add-to-list 'load-path "~/.emacs.d/project-root") ;; My pkg for finding proj. roots.
(add-to-list 'load-path "~/.emacs.d/sunshine")     ;; My pkg for displaying weather data.
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
(add-to-list 'exec-path "/usr/local/bin")

(require 'sunshine)
(setq sunshine-location "Brookline, MA")

(setq inhibit-splash-screen t
      inhibit-startup-message t
      inhibit-startup-echo-area-message t)
(menu-bar-mode -1)
(tool-bar-mode -1)
(show-paren-mode 1)
(setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
(visual-line-mode 1)

;;; Turn off scroll bar mode if it exists (GUI only)
(when (boundp 'scroll-bar-mode)
  (scroll-bar-mode -1))

;;; Evil leader must be loaded before evil (as documented).
(global-evil-leader-mode)
;;; Always use evil mode.
(evil-mode 1)
(global-auto-complete-mode t)

;;; Seamlessly degrade color themes to terminal colors.
(autoload 'color-theme-approximate-on "color-theme-approximate")
(color-theme-approximate-on)

(defvar show-paren-delay 0
  "Delay (in seconds) before matching paren is highlighted.")
(setq-default left-fringe-width 10)
(defvar projectile-enable-caching t
  "Tell Projectile to cache project file lists.")

(defvar backup-dir "~/.emacs.d/backups/")
(setq backup-directory-alist (list (cons "." backup-dir)))
(setq make-backup-files nil)

(setq-default highlight-symbol-idle-delay 1.5)
(setq-default fci-rule-character 9474)
(setq-default fci-rule-character-color "color-52")

(powerline-evil-vim-color-theme)

;;; YAsnippet
(require 'yasnippet)
(setq-default yas-snippet-dirs '("~/.emacs.d/snippets"
                                 "~/.emacs.d/remote-snippets"))
(yas-global-mode 1)
(define-key yas-minor-mode-map (kbd "<tab>") nil)
(define-key yas-minor-mode-map (kbd "TAB") nil)
(define-key yas-minor-mode-map (kbd "C-l") 'yas-expand)

(setq yas-prompt-functions '(yas-completing-prompt
                             yas-ido-prompt
                             yas-dropdown-prompt))

(add-hook 'after-init-hook #'global-flycheck-mode)
(setq-default flycheck-disabled-checkers '(php-phpmd))
(setq-default flycheck-phpcs-standard "CSNStores")
(projectile-global-mode)

(add-hook 'magit-mode-hook (lambda ()
                             (when (fboundp 'turn-off-evil-mode) (turn-off-evil-mode))))

;;; I'm holding off on these for a while because evil shadows too many
;;; really useful keys in magit and learning basic motions isn't a big
;;; deal.
;;;
;;; Get evil key bindings in magit modes.
;;(evil-add-hjkl-bindings magit-branch-manager-mode-map 'emacs
;;  "K" 'magit-discard-item
;;  "L" 'magit-key-mode-popup-logging)
;;(evil-add-hjkl-bindings magit-status-mode-map 'motion
;;  "O" 'magit-jump-to-unstaged
;;  "K" 'magit-discard-item
;;  "l" 'magit-key-mode-popup-logging
;;  "h" 'magit-toggle-diff-refine-hunk
;;  "R" 'magit-rebase-step
;;  "?" 'magit-key-mode-popup-dispatch)
;;(evil-add-hjkl-bindings magit-log-mode-map 'emacs)
;;(evil-add-hjkl-bindings magit-commit-mode-map 'emacs)

(evil-add-hjkl-bindings ag-mode-map 'normal
  "n"   'evil-search-next
  "N"   'evil-search-previous
  "RET" 'compile-goto-error)
(evil-add-hjkl-bindings occur-mode-map 'emacs
  (kbd "/")       'evil-search-forward
  (kbd "n")       'evil-search-next
  (kbd "N")       'evil-search-previous
  (kbd "C-d")     'evil-scroll-down
  (kbd "C-u")     'evil-scroll-up
  (kbd "C-w C-w") 'other-window)
(evil-add-hjkl-bindings org-agenda-mode-map 'emacs
  "RET" 'org-agenda-switch-to)

;;; Settings for evil-mode.
(setq evil-want-C-u-scroll t)
(setq evil-leader/in-all-states 1)
(setq-default evil-want-C-i-jump nil)
(evil-set-initial-state 'twittering-edit-mode 'insert)
;;; Use Helm all the time.
(setq helm-buffers-fuzzy-matching t)
(helm-mode 1)

;;; Use evil surround mode in all buffers.
(global-evil-surround-mode 1)

;;; Use spaces instead of tabs.
(setq-default indent-tabs-mode nil)
;;; Don't actually use VC, because it slows down loading.
(eval-after-load "vc" '(setq vc-handled-backends nil))
;;; Follow symlinks to version-controlled files without argument. Just do it.
(setq vc-follow-symlinks t)
;;; Don't warn me when files are big. It's fine.
(setq large-file-warning-threshold nil)
;;; Never "sensibly" split windows vertically.
(setq split-width-threshold nil)

(defun occur-last-search ()
  "Run `occur` with the last evil search term."
  (interactive)
  ;; Use the appropriate search term based on regexp setting.
  (let ((term (if evil-regexp-search
                  (car-safe regexp-search-ring)
                (car-safe search-ring))))
    ;; If a search term exists, execute `occur` on it.
    (if (> (length term) 0)
        (occur term)
      (message "No term to search for."))))

(defun show-first-occurrence ()
  "Display the location of the word at point's first occurrence in the buffer."
  (interactive)
  (save-excursion
    (let ((search-word (thing-at-point 'symbol t)))
      (goto-char 1)
      (re-search-forward search-word)
      (message (concat
                "L" (number-to-string (line-number-at-pos)) ": "
                (replace-regexp-in-string
                 "[ \t\n]*\\'"
                 ""
                 (thing-at-point 'line t)
                 ))))))

(defun switch-to-previous-buffer ()
  "Switch to previously open buffer.
Repeated invocations toggle between the two most recently open buffers."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))

;;; Functions for working with the X clipboard, which is very handy.
(defun yank-to-x-clipboard (&optional start end)
  (interactive "r")
  ;; Force the command to output everything to the default output buffer and don't show it.
  (shell-command-on-region start end "/usr/bin/xsel --clipboard -i > /dev/null" nil nil nil nil)
  (deactivate-mark))

(defun put-from-x-clipboard ()
  (interactive)
  (insert (shell-command-to-string "xsel --clipboard")))

(defun selective-display-increase ()
  (interactive)
  (set-selective-display
   (if selective-display (+ selective-display 1) 1)))

(defun selective-display-decrease ()
  (interactive)
  (when selective-display
    (set-selective-display
     (if (< (- selective-display 1) 1)
         nil
       (- selective-display 1)))))

;;; Give me more awesome key bindings that I miss from Vim.
(define-key evil-normal-state-map (kbd "C-p") 'helm-projectile)
(define-key evil-normal-state-map (kbd "-") 'helm-find-files)
(define-key evil-normal-state-map (kbd "C-]") 'gtags-find-tag-from-here)
(define-key evil-normal-state-map (kbd "g/") 'occur-last-search)
(evil-define-key 'normal global-map (kbd "[i") 'show-first-occurrence)
(define-key helm-find-files-map (kbd "C-k") 'helm-find-files-up-one-level)
(evil-define-key 'normal org-mode-map (kbd "TAB") 'org-cycle)
(evil-define-key 'normal org-mode-map (kbd "C-\\") 'org-insert-heading)
(evil-define-key 'insert org-mode-map (kbd "C-\\") 'org-insert-heading)

;;; This is bound to a leader key below.
(defun my-align-single-equals ()
  "Align on the first single equal sign."
  (interactive)
  (align-regexp
   (region-beginning) (region-end)
   "\\(\\s-*\\)=" 1 1 nil))

;;; Helpers for narrowing.
(defun narrow-and-set-normal ()
  "Narrow to the region and, if in a visual mode, set normal mode."
  (interactive)
  (narrow-to-region (region-beginning) (region-end))
  (if (string= evil-state "visual")
      (progn (evil-normal-state nil)
             (evil-goto-first-line))))

(defun open-current-line-in-codebase-search ()
  "Go to the current file's current line on the codebase site."
  (interactive)
  (let* ((line-num (number-to-string (line-number-at-pos)))
         (file-path (replace-regexp-in-string (project-root) "" (buffer-file-name)))
         (args (concat "http://dox.wayfair.com/source/xref/php/" file-path "#" line-num)))
    (call-process "xdg-open" nil nil nil args)))

;;; Configure evil-leader
(evil-leader/set-leader ",")
(evil-leader/set-key
  "."  'switch-to-previous-buffer
  "aa" 'align-regexp
  "a=" 'my-align-single-equals
  "b"  'helm-mini
  "B"  'magit-blame-mode
  "d"  (lambda () (interactive) (evil-ex-call-command nil "bdelete" nil))
  "D"  'open-current-line-in-codebase-search
  "f"  'helm-semantic-or-imenu
  "g"  'magit-status
  "l"  'whitespace-mode
  "nn" 'narrow-and-set-normal ;; "narrow normal"
  "nw" 'widen                 ;; "narrow widen"
  "o"  'delete-other-windows
  "p"  'put-from-x-clipboard
  "s"  'ag-project            ;; "search"
  "r"  'font-lock-fontify-buffer
  "S"  'delete-trailing-whitespace
  "t"  'gtags-reindex
  "T"  'gtags-find-tag
  "w"  'save-buffer
  "x"  'helm-M-x
  "y"  'yank-to-x-clipboard)

;;; Set up relative line numbering to mimic `:set number relativenumber`.
(global-linum-mode t)
(add-hook 'linum-before-numbering-hook 'my-linum-get-format-string)

;;; Stuff for line numbers.
(defun my-linum-get-format-string ()
  (let* ((width (max 4 (1+ (length (number-to-string
                             (count-lines (point-min) (point-max)))))))
         (format (concat "%" (number-to-string width) "d ")))
    (setq my-linum-format-string format)))

(defvar my-linum-current-line-number 0)

(setq linum-format 'my-linum-relative-line-numbers)

(defun my-linum-relative-line-numbers (line-number)
  (let* ( (offset (abs (- line-number my-linum-current-line-number)))
          (linum-display-value (if (= 0 offset)
				   my-linum-current-line-number
				   offset))
        )
    (propertize (format my-linum-format-string linum-display-value) 'face 'linum)))

(defadvice linum-update (around my-linum-update)
  (let ((my-linum-current-line-number (line-number-at-pos)))
    ad-do-it))
(ad-activate 'linum-update)

(defun my-php-lineup-arglist-intro (langelem)
  (save-excursion
    (goto-char (cdr langelem))
    (vector (+ (current-column) (* 2 c-basic-offset)))))

(defun my-php-lineup-arglist-close (langelem)
  (save-excursion
    (goto-char (cdr langelem))
    (vector (current-column))))

(defun my-php-lineup-arglist-cont-nonempty (langelem)
  "Align continued arglist lines to two times the basic offset from langelem."
  (save-excursion
    (goto-char (cdr langelem))
    (vector (+ (current-column) (* 2 c-basic-offset)))))

;;; Provide a style based on "php" that changes a couple of indent behaviors.
(c-add-style "wf-php"
             '("php"
               (c-basic-offset . 2)
               (c-offsets-alist . ((arglist-intro . my-php-lineup-arglist-intro)
                                   (arglist-close . my-php-lineup-arglist-close)
                                   (arglist-cont-nonempty . my-php-lineup-arglist-cont-nonempty)))))

;;; Configure things for PHP usage.
(defun configure-php-mode ()
  (require 'newcomment)
  (setq comment-auto-fill-only-comments 1)
  (setq auto-fill-function 'do-auto-fill)

  (c-set-style "wf-php")
  (turn-on-eldoc-mode)
  (highlight-symbol-mode)

  (turn-on-auto-fill)
  (set-fill-column 120)
  (turn-on-fci-mode)
  (add-to-list 'write-file-functions 'delete-trailing-whitespace)
  (gtags-mode t)

  (define-key evil-normal-state-map (kbd "_") 'selective-display-decrease)
  (define-key evil-normal-state-map (kbd "+") 'selective-display-increase))

(add-hook 'php-mode-hook 'configure-php-mode)

;;; Flycheck mode:
(add-hook 'flycheck-mode-hook (lambda ()
  (evil-define-key 'normal flycheck-mode-map (kbd "]e") 'flycheck-next-error)
  (evil-define-key 'normal flycheck-mode-map (kbd "[e") 'flycheck-previous-error)))

;;; Org mode:
(evil-leader/set-key-for-mode 'org-mode
  "t" 'org-set-tags
  "p" '(lambda ()
         (interactive)
         (org-insert-property-drawer))
  "d" 'org-deadline
  "a" 'org-agenda
  "ns" 'org-narrow-to-subtree)

(add-hook 'org-mode-hook
          (lambda ()
            (auto-fill-mode)))

;;; Emacs Lisp mode:
(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (turn-on-eldoc-mode)
            (highlight-symbol-mode)))

;;; SH mode:
(add-hook 'sh-mode-hook (lambda ()
                          (setq sh-basic-offset 2)
                          (setq sh-indentation 2)))

;;; Twittering mode:
(add-hook 'twittering-mode-hook (lambda ()
                                  (define-key twittering-mode-map (kbd ",b") 'helm-mini)))

;;; Bind some useful keys in the gtags select buffer that evil overrides.
(add-hook 'gtags-select-mode-hook
          (lambda ()
            (define-key evil-normal-state-local-map (kbd "RET") 'gtags-select-tag)
            (define-key evil-normal-state-local-map (kbd "q") 'kill-buffer-and-window)
            ))

;;; Let me move the selection like a normal human in the Grizzl results buffer.
(add-hook 'grizzl-mode-hook (lambda ()
                              (define-key *grizzl-keymap* (kbd "C-j") 'grizzl-set-selection-1)
                              (define-key *grizzl-keymap* (kbd "C-k") 'grizzl-set-selection+1)))

;;; Javascript mode:
(add-hook 'javascript-mode-hook (lambda ()
                                  (message "IAM RUNNIGN IN UR HOOKS")
                                  (set-fill-column 120)
                                  (turn-on-auto-fill)
                                  (setq js-indent-level 2)))

;;; Markdown mode:
(add-hook 'markdown-mode-hook (lambda ()
                                (set-fill-column 80)
                                (turn-on-auto-fill)
                                (turn-on-fci-mode)
                                (flyspell-mode)))

;;; Sunshine mode:
(add-hook 'sunshine-mode-hook (lambda ()
                                (when (fboundp 'turn-off-evil-mode) (turn-off-evil-mode))))

(defun find-php-functions-in-current-buffer ()
  "Find lines that appear to be PHP functions in the buffer.

This function performs a regexp forward search from the top
(point-min) of the buffer to the end, looking for lines that
appear to be PHP function declarations.

The return value of this function is a list of cons in which
the car of each cons is the bare function name and the cdr
is the buffer location at which the function was found."
  (save-excursion
    (goto-char (point-min))
    (let (res)
      (save-match-data
        (while (re-search-forward  "^ *\\(public \\|private \\|protected \\|static \\)*?function \\([^{]+\\)" nil t)
          (let* ((fn-name (save-match-data (match-string-no-properties 2)))
                 (fn-location (save-match-data (match-beginning 0))))
            (setq res
                  (append res
                          (list `(,fn-name . ,fn-location)))))))
      res)))

(defun helm-project-files ()
  (interactive)
  (helm-other-buffer '(helm-c-source-projectile-files-list) "*Project Files*"))

(defun minibuffer-keyboard-quit ()
  "Abort recursive edit.
In Delete Selection mode, if the mark is active, just deactivate it;
then it takes a second \\[keyboard-quit] to abort the minibuffer."
  (interactive)
  (if (and delete-selection-mode transient-mark-mode mark-active)
      (setq deactivate-mark  t)
    (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
    (abort-recursive-edit)))
(define-key evil-normal-state-map [escape] 'keyboard-quit)
(define-key evil-visual-state-map [escape] 'keyboard-quit)
(define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default bold shadow italic underline bold bold-italic bold])
 '(ansi-color-names-vector
   ["black" "#E2434C" "#86B187" "#E0D063" "#84C452" "#E18CBB" "#8AC6F2" "white"])
 '(ansi-term-color-vector
   [unspecified "#1F1611" "#660000" "#144212" "#EFC232" "#5798AE" "#BE73FD" "#93C1BC" "#E6E1DC"] t)
 '(custom-safe-themes
   (quote
    ("f0ea6118d1414b24c2e4babdc8e252707727e7b4ff2e791129f240a2b3093e32" "4a8e9e2bdd1abc7d350fd852c0a709a70692724ae4129bbec9bf208da979f9dd" "2730455cec4b72ae4578a2bd8fb9874c489129696d4c13844d8a7e4df82d6c35" "fa942713c74b5ad27893e72ed8dccf791c9d39e5e7336e52d76e7125bfa51d4c" "c01f093ab78aad6ae2c27abc47519709c6b3aaa2c1e35c712d4dd81ff1df7e31" "9dae95cdbed1505d45322ef8b5aa90ccb6cb59e0ff26fef0b8f411dfc416c552" "7153b82e50b6f7452b4519097f880d968a6eaf6f6ef38cc45a144958e553fbc6" "5e3fc08bcadce4c6785fc49be686a4a82a356db569f55d411258984e952f194a" "c4e6fe8f5728a5d5fd0e92538f68c3b4e8b218bcfb5e07d8afff8731cc5f3df0" "97a2b10275e3e5c67f46ddaac0ec7969aeb35068c03ec4157cf4887c401e74b1" "ad9fc392386f4859d28fe4ef3803585b51557838dbc072762117adad37e83585" "72407995e2f9932fda3347e44e8c3f29879c5ed88da71f06ba4887b0596959a4" "2b5aa66b7d5be41b18cc67f3286ae664134b95ccc4a86c9339c886dfd736132d" "49eea2857afb24808915643b1b5bd093eefb35424c758f502e98a03d0d3df4b1" "8d6fb24169d94df45422617a1dfabf15ca42a97d594d28b3584dc6db711e0e0b" "08efabe5a8f3827508634a3ceed33fa06b9daeef9c70a24218b70494acdf7855" "ab04c00a7e48ad784b52f34aa6bfa1e80d0c3fcacc50e1189af3651013eb0d58" "04dd0236a367865e591927a3810f178e8d33c372ad5bfef48b5ce90d4b476481" "7356632cebc6a11a87bc5fcffaa49bae528026a78637acd03cae57c091afd9b9" "1157a4055504672be1df1232bed784ba575c60ab44d8e6c7b3800ae76b42f8bd" "e6d83e70d2955e374e821e6785cd661ec363091edf56a463d0018dc49fbc92dd" "cea6d15a8333e0c78e1e15a0524000de69aac2afa7bb6cf9d043a2627327844e" "06f0b439b62164c6f8f84fdda32b62fb50b6d00e8b01c2208e55543a6337433a" "628278136f88aa1a151bb2d6c8a86bf2b7631fbea5f0f76cba2a0079cd910f7d" "1b8d67b43ff1723960eb5e0cba512a2c7a2ad544ddb2533a90101fd1852b426e" "82d2cac368ccdec2fcc7573f24c3f79654b78bf133096f9b40c20d97ec1d8016" "bb08c73af94ee74453c90422485b29e5643b73b05e8de029a6909af6a3fb3f58" "cf08ae4c26cacce2eebff39d129ea0a21c9d7bf70ea9b945588c1c66392578d1" "5ee12d8250b0952deefc88814cf0672327d7ee70b16344372db9460e9a0e3ffc" "7f1263c969f04a8e58f9441f4ba4d7fb1302243355cb9faecb55aec878a06ee9" "8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4" "8b30636c9a903a9fa38c7dcf779da0724a37959967b6e4c714fdc3b3fe0b8653" "4907d08a09cd6e987bb0eec7ed6cbc56fc1318b1d965d7dad176c9590aa7a7a0" "3b819bba57a676edf6e4881bd38c777f96d1aa3b3b5bc21d8266fa5b0d0f1ebf" default)))
 '(diary-entry-marker (quote font-lock-variable-name-face))
 '(evil-symbol-word-search t)
 '(fci-rule-character-color "#452E2E")
 '(fci-rule-color "#222222")
 '(gnus-logo-colors (quote ("#0d7b72" "#adadad")))
 '(js-indent-level 2)
 '(org-agenda-files
   (quote
    ("~/Dropbox/org/todo.org_archive" "~/Dropbox/org/todo.org")))
 '(org-directory "~/Dropbox/org")
 '(org-mobile-directory "~/Dropbox/org/mobile")
 '(org-mobile-inbox-for-pull "~/Dropbox/org/mobile/capture.org")
 '(safe-local-variable-values (quote ((require-final-newline))))
 '(vc-annotate-background "#222222")
 '(vc-annotate-color-map
   (quote
    ((20 . "#db4334")
     (40 . "#ea3838")
     (60 . "#abab3a")
     (80 . "#e5c900")
     (100 . "#fe8b04")
     (120 . "#e8e815")
     (140 . "#3cb370")
     (160 . "#099709")
     (180 . "#7fb07f")
     (200 . "#32cd32")
     (220 . "#8ce096")
     (240 . "#528d8d")
     (260 . "#1fb3b3")
     (280 . "#0c8782")
     (300 . "#00aff5")
     (320 . "#62b6ea")
     (340 . "#94bff3")
     (360 . "#e353b9"))))
 '(vc-annotate-very-old-color "#e353b9"))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;;; Load up my copy of the fiplr-find-root stuff, which I use to process GTAGS.
(autoload 'project-root "project-root")

(defun gtags-reindex ()
  "Kick off gtags reindexing.

This function finds the root directory of the project by looking around for
VCS marker files or directories and then runs gtags there, sending the
output to a new buffer. All of the real work is done by
gtags-reindex-process."
  (interactive)
  (let* ((root-path (project-root))
         (gtags-path (concat root-path "GTAGS")))
    (if (file-exists-p gtags-path)
        (gtags-reindex-process root-path)
      (message "I have not found GTAGS."))))

(defun gtags-reindex-process (path)
  "Run gtags on the given path and show output in a new buffer."
  (let ((gtags-buffer (get-buffer-create "*Gtags*")))
    (with-current-buffer gtags-buffer
      (display-buffer gtags-buffer)
      (setq gtags-window (get-buffer-window gtags-buffer))
      (with-selected-window gtags-window
        (if (> (window-size) 10)
            (shrink-window (- (window-size) 10))
          (enlarge-window (- 10 (window-size)))))
      (widen)
      (kill-all-local-variables)
      (let ((inhibit-read-only t) (erase-buffer)))
      (let ((cmd (concat "cd " (shell-quote-argument path) " && "
                         "find . -type f -iname '*php' | "
                         "gtags -v -f - &"))
            (map (make-sparse-keymap)))
        (shell-command cmd (current-buffer))
        (set-keymap-parent map (current-local-map))
        (define-key map "q" #'(lambda () (interactive) (kill-buffer (current-buffer))))
        (use-local-map map)
        (if (fboundp 'evil-normal-state)
            (evil-normal-state))))))

;; handle tmux's xterm-keys
;; put the following line in your ~/.tmux.conf:
;;   setw -g xterm-keys on
(if (getenv "TMUX")
    (progn
      (let ((x 2) (tkey ""))
        (while (<= x 8)
          ;; shift
          (if (= x 2)
              (setq tkey "S-"))
          ;; alt
          (if (= x 3)
              (setq tkey "M-"))
          ;; alt + shift
          (if (= x 4)
              (setq tkey "M-S-"))
          ;; ctrl
          (if (= x 5)
              (setq tkey "C-"))
          ;; ctrl + shift
          (if (= x 6)
              (setq tkey "C-S-"))
          ;; ctrl + alt
          (if (= x 7)
              (setq tkey "C-M-"))
          ;; ctrl + alt + shift
          (if (= x 8)
              (setq tkey "C-M-S-"))

          ;; arrows
          (define-key key-translation-map (kbd (format "M-[ 1 ; %d A" x)) (kbd (format "%s<up>" tkey)))
          (define-key key-translation-map (kbd (format "M-[ 1 ; %d B" x)) (kbd (format "%s<down>" tkey)))
          (define-key key-translation-map (kbd (format "M-[ 1 ; %d C" x)) (kbd (format "%s<right>" tkey)))
          (define-key key-translation-map (kbd (format "M-[ 1 ; %d D" x)) (kbd (format "%s<left>" tkey)))
          ;; home
          (define-key key-translation-map (kbd (format "M-[ 1 ; %d H" x)) (kbd (format "%s<home>" tkey)))
          ;; end
          (define-key key-translation-map (kbd (format "M-[ 1 ; %d F" x)) (kbd (format "%s<end>" tkey)))
          ;; page up
          (define-key key-translation-map (kbd (format "M-[ 5 ; %d ~" x)) (kbd (format "%s<prior>" tkey)))
          ;; page down
          (define-key key-translation-map (kbd (format "M-[ 6 ; %d ~" x)) (kbd (format "%s<next>" tkey)))
          ;; insert
          (define-key key-translation-map (kbd (format "M-[ 2 ; %d ~" x)) (kbd (format "%s<delete>" tkey)))
          ;; delete
          (define-key key-translation-map (kbd (format "M-[ 3 ; %d ~" x)) (kbd (format "%s<delete>" tkey)))
          ;; f1
          (define-key key-translation-map (kbd (format "M-[ 1 ; %d P" x)) (kbd (format "%s<f1>" tkey)))
          ;; f2
          (define-key key-translation-map (kbd (format "M-[ 1 ; %d Q" x)) (kbd (format "%s<f2>" tkey)))
          ;; f3
          (define-key key-translation-map (kbd (format "M-[ 1 ; %d R" x)) (kbd (format "%s<f3>" tkey)))
          ;; f4
          (define-key key-translation-map (kbd (format "M-[ 1 ; %d S" x)) (kbd (format "%s<f4>" tkey)))
          ;; f5
          (define-key key-translation-map (kbd (format "M-[ 15 ; %d ~" x)) (kbd (format "%s<f5>" tkey)))
          ;; f6
          (define-key key-translation-map (kbd (format "M-[ 17 ; %d ~" x)) (kbd (format "%s<f6>" tkey)))
          ;; f7
          (define-key key-translation-map (kbd (format "M-[ 18 ; %d ~" x)) (kbd (format "%s<f7>" tkey)))
          ;; f8
          (define-key key-translation-map (kbd (format "M-[ 19 ; %d ~" x)) (kbd (format "%s<f8>" tkey)))
          ;; f9
          (define-key key-translation-map (kbd (format "M-[ 20 ; %d ~" x)) (kbd (format "%s<f9>" tkey)))
          ;; f10
          (define-key key-translation-map (kbd (format "M-[ 21 ; %d ~" x)) (kbd (format "%s<f10>" tkey)))
          ;; f11
          (define-key key-translation-map (kbd (format "M-[ 23 ; %d ~" x)) (kbd (format "%s<f11>" tkey)))
          ;; f12
          (define-key key-translation-map (kbd (format "M-[ 24 ; %d ~" x)) (kbd (format "%s<f12>" tkey)))
          ;; f13
          (define-key key-translation-map (kbd (format "M-[ 25 ; %d ~" x)) (kbd (format "%s<f13>" tkey)))
          ;; f14
          (define-key key-translation-map (kbd (format "M-[ 26 ; %d ~" x)) (kbd (format "%s<f14>" tkey)))
          ;; f15
          (define-key key-translation-map (kbd (format "M-[ 28 ; %d ~" x)) (kbd (format "%s<f15>" tkey)))
          ;; f16
          (define-key key-translation-map (kbd (format "M-[ 29 ; %d ~" x)) (kbd (format "%s<f16>" tkey)))
          ;; f17
          (define-key key-translation-map (kbd (format "M-[ 31 ; %d ~" x)) (kbd (format "%s<f17>" tkey)))
          ;; f18
          (define-key key-translation-map (kbd (format "M-[ 32 ; %d ~" x)) (kbd (format "%s<f18>" tkey)))
          ;; f19
          (define-key key-translation-map (kbd (format "M-[ 33 ; %d ~" x)) (kbd (format "%s<f19>" tkey)))
          ;; f20
          (define-key key-translation-map (kbd (format "M-[ 34 ; %d ~" x)) (kbd (format "%s<f20>" tkey)))

          (setq x (+ x 1))
          ))
      )
  )

(put 'narrow-to-region 'disabled nil)
(load-theme 'zenburn t)

(provide 'emacs)
;;; emacs ends here

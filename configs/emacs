;-*-Emacs-Lisp-*-

; list the packages you want
(setq package-list '(evil
                     evil-leader
                     evil-jumper
                     evil-surround
                     evil-indent-textobject
                     fiplr
                     ido-vertical-mode
                     magit
                     powerline
                     powerline-evil
                     php-mode
                     php-completion
                     php-extras
                     zenburn-theme
                     etags-select
                     helm))

; list the repositories containing them
(setq package-archives '(("elpa" . "http://tromey.com/elpa/")
                         ("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")))
(setq package-archive-enable-alist '(("melpa" deft magit)))

; activate all the packages (in particular autoloads)
(package-initialize)

; fetch the list of packages available
(unless (file-exists-p package-user-dir)
  (package-refresh-contents))

; install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))

(add-to-list 'load-path "~/.emacs.d")
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")

(require 'cl)

(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")

(require 'powerline)
(require 'powerline-evil)
(powerline-evil-vim-color-theme)

(load-theme 'xoria256 t)

; Settings for evil-mode.
(setq evil-want-C-u-scroll t)
(setq evil-want-C-i-jump t)
; Always use evil mode.
(evil-mode 1)
; Use evil leader keys everywhere.
(global-evil-leader-mode)
; This seems to allow helm-buffers-list to work right away.
(helm-mode)
; This is helpful for things like function and filenames.
(ido-vertical-mode)
; Load additional custom evil key mappings for magit modes.
(load "~/.emacs.d/evil-rebellion/evil-magit-rebellion.el")

; Use evil surround, of course.
(require 'evil-surround)

; Use default auto-completion configuration.
(ac-config-default)
; Use evil surround mode in all buffers.
(global-evil-surround-mode 1)

; Use spaces instead of tabs.
(setq-default indent-tabs-mode nil)
; Don't actually use VC, because it slows down loading.
(eval-after-load "vc" '(setq vc-handled-backends nil))
; Follow symlinks to version-controlled files without argument. Just do it.
(setq vc-follow-symlinks t)
; Don't warn me when files are big. It's fine.
(setq large-file-warning-threshold nil)

(defun find-tag-no-prompt ()
  "Jump to the tag at point without prompting."
  (interactive)
  (find-tag (find-tag-default)))
(global-set-key (kbd "C-]") 'find-tag-no-prompt)

(defun switch-to-previous-buffer ()
  "Switch to previously open buffer.
Repeated invocations toggle between the two most recently open buffers."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))

;; (defun indent-or-expand (arg)
;;   "Either indent according to mode, or expand previous word."
;;   (interactive "*P")
;;   (if (and
;;        (or (bobp) (= ?w (char-syntax (char-before))))
;;        (or (eobp) (not (= ?w (char-syntax (char-after))))))
;;       (dabbrev-expand arg)
;;     (indent-according-to-mode)))
;; (defun my-tab-fix ()
;;   (local-set-key (kbd "TAB") 'indent-or-expand))
;;
;; (add-hook 'php-mode-hook 'my-tab-fix)
;; (add-hook 'emacs-lisp-mode-hook 'my-tab-fix)

; Eldoc displays function signatures in the minibuffer. Awesome.
(add-hook 'php-mode-hook 'turn-on-eldoc-mode)

(define-key evil-normal-state-map (kbd "C-p") 'fiplr-find-file)
(define-key evil-normal-state-map (kbd "-") 'helm-find-files)

(add-hook 'grizzl-mode-hook (lambda ()
  (define-key *grizzl-keymap* (kbd "C-j") 'grizzl-set-selection-1)
  (define-key *grizzl-keymap* (kbd "C-k") 'grizzl-set-selection+1)
))

; Get evil key bindings in magit modes.
(evil-add-hjkl-bindings magit-branch-manager-mode-map 'emacs
  "K" 'magit-discard-item
  "L" 'magit-key-mode-popup-logging)
(evil-add-hjkl-bindings magit-status-mode-map 'emacs
  "K" 'magit-discard-item
  "l" 'magit-key-mode-popup-logging
  "h" 'magit-toggle-diff-refine-hunk)
(evil-add-hjkl-bindings magit-log-mode-map 'emacs)
(evil-add-hjkl-bindings magit-commit-mode-map 'emacs)

;; Configure evil-leader
(evil-leader/set-leader ",")
(evil-leader/set-key
  "." 'switch-to-previous-buffer
  "b" 'helm-buffers-list
  "f" 'jump-to-function
  "g" 'magit-status
  "w" 'ido-jump-to-window
  "x" 'execute-extended-command)
(define-key evil-normal-state-map (kbd "-") 'helm-find-files)

;; Set up relative line numbering to mimic `:set number relativenumber`
(global-linum-mode t)
(add-hook 'linum-before-numbering-hook 'my-linum-get-format-string)

(show-paren-mode 1)
(setq show-paren-delay 0)

(defun my-linum-get-format-string ()
  (let* ((width (1+ (length (number-to-string
                             (count-lines (point-min) (point-max))))))
         (format (concat "%" (number-to-string width) "d ")))
    (setq my-linum-format-string format)))

(defvar my-linum-current-line-number 0)

(setq linum-format 'my-linum-relative-line-numbers)

(defun my-linum-relative-line-numbers (line-number)
  (let* ( (offset (abs (- line-number my-linum-current-line-number)))
          (linum-display-value (if (= 0 offset) 
				   my-linum-current-line-number
				   offset))
        )
    (propertize (format my-linum-format-string linum-display-value) 'face 'linum)))

(defadvice linum-update (around my-linum-update)
  (let ((my-linum-current-line-number (line-number-at-pos)))
    ad-do-it))
(ad-activate 'linum-update)

(c-add-style
  "wayfair"
  '((c-basic-offset . 2)
   )
)
(add-hook 'php-mode-hook (lambda () (c-set-style "wayfair")))

(defun find-functions ()
  (save-excursion
    (goto-char (point-min))
    (let (res)
      (save-match-data
        (while (re-search-forward  "^ *\\(public \\|private \\|static \\)*?function \\([^{]+\\)" nil t)
          (let* ((fn-name (save-match-data (match-string-no-properties 2)))
                 (fn-location (save-match-data (match-beginning 0))))
            (setq res
                  (append res
                          (list `(,fn-name . ,fn-location)))))))
      res)))

(defun jump-to-function ()
  (interactive)
  (let* ((search-results (find-functions))
         (function-names (mapcar #'(lambda (search-result) (car search-result)) search-results))
         (selected-function (ido-completing-read "Function: " function-names)))
    (goto-char (car (delq nil (mapcar #'(lambda (search-result) 
                                     (if (equal selected-function (car search-result))
                                         (cdr search-result)
                                       nil) )
                                 search-results))))))

;; This command is AMAZING. I recommend mapping it to `C-x v' or `C-x w'
;; depending on which is easier on your keyboard.
(defun ido-jump-to-window ()
  (interactive)
  (let* ((swap (lambda (l)
                 (if (cdr l)
                     (cons (cadr l) (cons (car l) (cddr l)))
                   l)))
         ;; Swaps the current buffer name with the next one along.
         (visible-buffers (funcall swap (mapcar #'(lambda (window) (buffer-name (window-buffer window))) (window-list))))
         (buffer-name (ido-completing-read "Window: " visible-buffers))
         window-of-buffer)
    (if (not (member buffer-name visible-buffers))
        (error "'%s' does not have a visible window" buffer-name)
      (setq window-of-buffer
                (delq nil (mapcar #'(lambda (window)
                                       (if (equal buffer-name (buffer-name (window-buffer window)))
                                           window
                                         nil))
                                  (window-list))))
      (select-window (car window-of-buffer)))))

(defun minibuffer-keyboard-quit ()
  "Abort recursive edit.
In Delete Selection mode, if the mark is active, just deactivate it;
then it takes a second \\[keyboard-quit] to abort the minibuffer."
  (interactive)
  (if (and delete-selection-mode transient-mark-mode mark-active)
      (setq deactivate-mark  t)
    (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
    (abort-recursive-edit)))
(define-key evil-normal-state-map [escape] 'keyboard-quit)
(define-key evil-visual-state-map [escape] 'keyboard-quit)
(define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes (quote ("8b30636c9a903a9fa38c7dcf779da0724a37959967b6e4c714fdc3b3fe0b8653" "4907d08a09cd6e987bb0eec7ed6cbc56fc1318b1d965d7dad176c9590aa7a7a0" "3b819bba57a676edf6e4881bd38c777f96d1aa3b3b5bc21d8266fa5b0d0f1ebf" default))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

; Visit the tags table in "./TAGS" if it exists.
(if (file-exists-p "./TAGS")
    (visit-tags-table "./TAGS"))

;-*-Emacs-Lisp-*-

;;; Commentary:
;;
;; I have nothing substantial to say here.
;;
;;; Code:

;;; Avoid compiler warnings about assigning free variables.
(defvar package-list)
(defvar package-archives)
(defvar package-archive-enable-alist)

;;; List the packages you want.
(setq package-list '(ag
                     evil
                     evil-leader
                     evil-jumper
                     evil-surround
                     evil-indent-textobject
                     fiplr
                     flycheck
                     helm
                     ido-vertical-mode
                     magit
                     powerline
                     powerline-evil
                     php-mode
                     php-completion
                     php-extras
                     yasnippet
                     zenburn-theme))

;;; List the repositories containing them.
(setq package-archives '(("elpa" . "http://tromey.com/elpa/")
                         ("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")))
(setq package-archive-enable-alist '(("melpa" magit flycheck)))

;;; Activate all the packages (in particular autoloads).
(package-initialize)

;;; Fetch the list of packages available.
(unless (file-exists-p package-user-dir)
  (package-refresh-contents))

;;; Install the missing packages.
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))

(add-to-list 'load-path "~/.emacs.d")
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")

(menu-bar-mode -1)
(show-paren-mode 1)
(setq show-paren-delay 0)

;(require 'cl)
(require 'powerline)
(require 'powerline-evil)
(require 'evil-surround)

;;; YAsnippet
(require 'yasnippet)
(setq-default yas-snippet-dirs '("~/.emacs.d/snippets"
                                 "~/.emacs.d/remote-snippets"))
(yas-global-mode 1)
(define-key yas-minor-mode-map (kbd "<tab>") nil)
(define-key yas-minor-mode-map (kbd "TAB") nil)
(define-key yas-minor-mode-map (kbd "C-l") 'yas-expand)

(setq yas-prompt-functions '(yas-completing-prompt
                             yas-ido-prompt
                             yas-dropdown-prompt))

;;; Auto-complete, with PHP dictionary.
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(ac-config-default)
(ac-set-trigger-key "TAB")
(ac-set-trigger-key "<tab>")
(setq ac-source-yasnippet nil)

(powerline-evil-vim-color-theme)

(load-theme 'xoria256 t)

(add-hook 'after-init-hook #'global-flycheck-mode)
(setq-default flycheck-disabled-checkers '(php-phpmd))
(setq-default flycheck-phpcs-standard "CSNStores")

;;; Get evil key bindings in magit modes.
(evil-add-hjkl-bindings magit-branch-manager-mode-map 'emacs
  "K" 'magit-discard-item
  "L" 'magit-key-mode-popup-logging)
(evil-add-hjkl-bindings magit-status-mode-map 'emacs
  (kbd "O") 'magit-jump-to-unstaged
  "K" 'magit-discard-item
  "l" 'magit-key-mode-popup-logging
  "h" 'magit-toggle-diff-refine-hunk)
(evil-add-hjkl-bindings magit-log-mode-map 'emacs)
(evil-add-hjkl-bindings magit-commit-mode-map 'emacs)
(evil-add-hjkl-bindings ag-mode-map 'normal
  "n" 'evil-search-next
  "N" 'evil-search-previous
  "RET" 'compile-goto-error)

(add-hook 'magit-status-mode-hook 
          (lambda () 
            (define-key magit-status-mode-map (kbd "O") 'magit-jump-to-unstaged)))

;;; Settings for evil-mode.
(setq evil-want-C-u-scroll t)
(setq evil-want-C-i-jump t)
;;; Always use evil mode.
(evil-mode 1)
;;; Use evil leader keys everywhere.
(global-evil-leader-mode)
;;; This seems to allow helm-buffers-list to work right away.
(helm-mode)
;;; This is helpful for things like function and filenames.
(ido-vertical-mode)
;;; Load additional custom evil key mappings for magit modes.
(load "~/.emacs.d/evil-rebellion/evil-magit-rebellion.el")

;;; Use evil surround mode in all buffers.
(global-evil-surround-mode 1)

;;; Use spaces instead of tabs.
(setq-default indent-tabs-mode nil)
;;; Don't actually use VC, because it slows down loading.
(eval-after-load "vc" '(setq vc-handled-backends nil))
;;; Follow symlinks to version-controlled files without argument. Just do it.
(setq vc-follow-symlinks t)
;;; Don't warn me when files are big. It's fine.
(setq large-file-warning-threshold nil)
;;; Never "sensibly" split windows vertically.
(setq split-width-threshold nil)

(defun switch-to-previous-buffer ()
  "Switch to previously open buffer.
Repeated invocations toggle between the two most recently open buffers."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))

(add-hook 'gtags-select-mode-hook
          (lambda ()
            (define-key evil-normal-state-local-map (kbd "RET") 'gtags-select-tag)
            (define-key evil-normal-state-local-map (kbd "q") 'kill-buffer-and-window)
            ))

(define-key evil-normal-state-map (kbd "C-p") 'fiplr-find-file)
(define-key evil-normal-state-map (kbd "-") 'helm-find-files)
(define-key evil-normal-state-map (kbd "C-]") 'gtags-find-tag-from-here)

(add-hook 'grizzl-mode-hook (lambda ()
                              (define-key *grizzl-keymap* (kbd "C-j") 'grizzl-set-selection-1)
                              (define-key *grizzl-keymap* (kbd "C-k") 'grizzl-set-selection+1)))

;;; Configure evil-leader
(evil-leader/set-leader ",")
(evil-leader/set-key
  "." 'switch-to-previous-buffer
  "a" 'ag-project
  "b" 'helm-buffers-list
  "f" 'helm-semantic-or-imenu
  "g" 'magit-status
  "r" 'font-lock-fontify-buffer
  "w" 'ido-jump-to-window
  "x" 'helm-M-x)
(define-key evil-normal-state-map (kbd "-") 'helm-find-files)

;;; Set up relative line numbering to mimic `:set number relativenumber`.
(global-linum-mode t)
(add-hook 'linum-before-numbering-hook 'my-linum-get-format-string)

;;; Stuff for line numbers.
(defun my-linum-get-format-string ()
  (let* ((width (max 3 (1+ (length (number-to-string
                             (count-lines (point-min) (point-max)))))))
         (format (concat "%" (number-to-string width) "d ")))
    (setq my-linum-format-string format)))

(defvar my-linum-current-line-number 0)

(setq linum-format 'my-linum-relative-line-numbers)

(defun my-linum-relative-line-numbers (line-number)
  (let* ( (offset (abs (- line-number my-linum-current-line-number)))
          (linum-display-value (if (= 0 offset) 
				   my-linum-current-line-number
				   offset))
        )
    (propertize (format my-linum-format-string linum-display-value) 'face 'linum)))

(defadvice linum-update (around my-linum-update)
  (let ((my-linum-current-line-number (line-number-at-pos)))
    ad-do-it))
(ad-activate 'linum-update)

;;; Configure things for PHP usage.
(add-hook 'php-mode-hook (lambda ()
                           ;; Create a custom style for PHP.
                           (c-add-style
                            "sensible"
                            '((c-basic-offset . 2)))
                           ;; Use that style.
                           (c-set-style "sensible")
                           ;; Use gtags because it's fast.
                           (require 'gtags)
                           (gtags-mode t)
                           ;; Eldoc displays function signatures in the minibuffer.
                           (eldoc-mode)
                           ;; 120 columns is quite enough.
                           (set-fill-column 120)
                           ;; Do comments the right way.
                           (require 'newcomment)
                           (setq comment-auto-fill-only-comments 1)
                           (setq auto-fill-function 'do-auto-fill)
                           (auto-fill-mode 1)))

(defun find-php-functions-in-current-buffer ()
  "Find lines that appear to be PHP functions in the buffer.

This function performs a regexp forward search from the top
(point-min) of the buffer to the end, looking for lines that
appear to be PHP function declarations.

The return value of this function is a list of cons in which
the car of each cons is the bare function name and the cdr
is the buffer location at which the function was found."
  (save-excursion
    (goto-char (point-min))
    (let (res)
      (save-match-data
        (while (re-search-forward  "^ *\\(public \\|private \\|protected \\|static \\)*?function \\([^{]+\\)" nil t)
          (let* ((fn-name (save-match-data (match-string-no-properties 2)))
                 (fn-location (save-match-data (match-beginning 0))))
            (setq res
                  (append res
                          (list `(,fn-name . ,fn-location)))))))
      res)))

(defun jump-to-php-function ()
  "Jump to the selected function in the current buffer.

This function will display a list with completing read
of the PHP function declarations in the current buffer,
found by find-php-functions-in-current-buffer. Selecting
a function name from the list will set point to the line
where that function is defined."
  (interactive)
  (let* ((search-results (find-php-functions-in-current-buffer))
         (function-names (mapcar #'(lambda (search-result) (car search-result)) search-results))
         (selected-function (if (> (length function-names) 0)
                                (completing-read "Function: " function-names)
                              nil)))
    (if selected-function
        (goto-char (car (delq nil (mapcar #'(lambda (search-result) 
                                              (if (equal selected-function (car search-result))
                                                  (cdr search-result)
                                                nil) )
                                          search-results))))
      (message "%s" (propertize "No functions found." 'face '(:foreground "red"))))))

;;; This command is AMAZING. I recommend mapping it to `C-x v' or `C-x w'
;;; depending on which is easier on your keyboard.
(defun ido-jump-to-window ()
  (interactive)
  (let* ((swap (lambda (l)
                 (if (cdr l)
                     (cons (cadr l) (cons (car l) (cddr l)))
                   l)))
         ;; Swaps the current buffer name with the next one along.
         (visible-buffers (funcall swap (mapcar #'(lambda (window) (buffer-name (window-buffer window))) (window-list))))
         (buffer-name (ido-completing-read "Window: " visible-buffers))
         window-of-buffer)
    (if (not (member buffer-name visible-buffers))
        (error "'%s' does not have a visible window" buffer-name)
      (setq window-of-buffer
                (delq nil (mapcar #'(lambda (window)
                                       (if (equal buffer-name (buffer-name (window-buffer window)))
                                           window
                                         nil))
                                  (window-list))))
      (select-window (car window-of-buffer)))))

(defun minibuffer-keyboard-quit ()
  "Abort recursive edit.
In Delete Selection mode, if the mark is active, just deactivate it;
then it takes a second \\[keyboard-quit] to abort the minibuffer."
  (interactive)
  (if (and delete-selection-mode transient-mark-mode mark-active)
      (setq deactivate-mark  t)
    (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
    (abort-recursive-edit)))
(define-key evil-normal-state-map [escape] 'keyboard-quit)
(define-key evil-visual-state-map [escape] 'keyboard-quit)
(define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes (quote ("8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4" "8b30636c9a903a9fa38c7dcf779da0724a37959967b6e4c714fdc3b3fe0b8653" "4907d08a09cd6e987bb0eec7ed6cbc56fc1318b1d965d7dad176c9590aa7a7a0" "3b819bba57a676edf6e4881bd38c777f96d1aa3b3b5bc21d8266fa5b0d0f1ebf" default)))
 '(safe-local-variable-values (quote ((require-final-newline)))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; Visit the tags table in "./TAGS" if it exists.
(if (file-exists-p "./TAGS")
    (visit-tags-table "./TAGS"))

(provide 'emacs)
;;; emacs ends here
